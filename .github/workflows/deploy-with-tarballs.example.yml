# Example GitHub Actions workflow for deploying with GitHub tarballs
# Copy this to .github/workflows/ and customize as needed

name: Deploy Demo with GitHub Tarballs

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy (branch, tag, or commit)'
        required: true
        default: 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Get git ref for tarball
        id: git-ref
        run: |
          REF="${{ github.event.inputs.ref }}"
          if [ -z "$REF" ]; then
            # Use branch name if not manual workflow
            REF="${{ github.ref_name }}"
          fi
          echo "ref=$REF" >> $GITHUB_OUTPUT
          echo "Deploying from ref: $REF"

      - name: Convert to GitHub tarballs
        run: |
          node scripts/convert-to-github-tarball.js ${{ steps.git-ref.outputs.ref }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile=false

      - name: Build packages
        run: pnpm build

      - name: Build demo app
        run: |
          cd apps/demo
          pnpm build

      - name: Deploy to hosting
        run: |
          # Add your deployment command here
          # For example:
          # - Vercel: vercel deploy --prod
          # - Netlify: netlify deploy --prod
          # - S3: aws s3 sync apps/demo/out s3://your-bucket
          echo "Deploy command goes here"

      - name: Restore workspace dependencies
        if: always()
        run: |
          node scripts/restore-to-workspace.js

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Ref**: ${{ steps.git-ref.outputs.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages**: Installed from GitHub tarballs" >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy to multiple environments
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Convert to develop branch tarballs
        run: node scripts/convert-to-github-tarball.js develop

      - name: Install and build
        run: |
          pnpm install --frozen-lockfile=false
          pnpm build
          cd apps/demo
          pnpm build

      - name: Deploy to staging
        run: echo "Deploy to staging environment"

  deploy-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Convert to tagged version
        run: node scripts/convert-to-github-tarball.js ${{ steps.tag.outputs.tag }}

      - name: Install and build
        run: |
          pnpm install --frozen-lockfile=false
          pnpm build
          cd apps/demo
          pnpm build

      - name: Deploy to production
        run: echo "Deploy to production environment"

